-- comprehensive_bool.rtt: Complete Boolean library for RelTT
-- Demonstrates standard boolean functions, constructors, and proven theorems

-- =============================================================================
-- BASIC BOOLEAN TYPE AND CONSTRUCTORS
-- =============================================================================

-- The Boolean type as a Church encoding
Bool := ∀X. X → X → X;

-- Boolean values as lambda terms (promoted to relation types)
True := (λx. λy. x);
False := (λx. λy. y);

-- =============================================================================
-- BASIC BOOLEAN OPERATIONS
-- =============================================================================

-- Logical negation
Not b := (λt. λf. b f t);

-- Logical conjunction (and)
_&&_ b1 b2 := (λt. λf. b1 (b2 t f) f);

-- Logical disjunction (or)
_||_ b1 b2 := (λt. λf. b1 t (b2 t f));

-- Logical exclusive or (xor)
Xor b1 b2 := (λt. λf. b1 (b2 f t) (b2 t f));

-- Logical implication
Implies b1 b2 := (λt. λf. b1 (b2 t f) t);

-- Logical equivalence (biconditional)
Iff b1 b2 := (λt. λf. b1 (b2 t f) (b2 f t));

-- =============================================================================
-- CONDITIONAL OPERATIONS
-- =============================================================================

-- If-then-else for booleans
IfThenElse b x y := b x y;

-- NAND (not and)
Nand b1 b2 := Not (b1 && b2);

-- NOR (not or)
Nor b1 b2 := Not (b1 || b2);

-- =============================================================================
-- PROVEN THEOREMS - TYPE MEMBERSHIP
-- =============================================================================

-- True is a Boolean
⊢ true_is_bool : True [Bool] True := ΛX. λp:X. λq:X. p;

-- False is a Boolean  
⊢ false_is_bool : False [Bool] False := ΛX. λp:X. λq:X. q;

-- =============================================================================
-- PROVEN THEOREMS - NEGATION PROPERTIES
-- =============================================================================

-- Not True related to False
⊢ not_true_is_false : (Not True) [False] (False (Not True)) := ι⟨Not True, False⟩;

-- Not False related to True
⊢ not_false_is_true : (Not False) [True] (True (Not False)) := ι⟨Not False, True⟩;

-- Double negation of True
⊢ double_neg_true : (Not (Not True)) [True] (True (Not (Not True))) := ι⟨Not (Not True), True⟩;

-- Double negation of False
⊢ double_neg_false : (Not (Not False)) [False] (False (Not (Not False))) := ι⟨Not (Not False), False⟩;

-- =============================================================================
-- PROVEN THEOREMS - CONJUNCTION PROPERTIES
-- =============================================================================

-- True AND True related to True
⊢ true_and_true : (True && True) [True] (True (True && True)) := ι⟨True && True, True⟩;

-- True AND False related to False
⊢ true_and_false : (True && False) [False] (False (True && False)) := ι⟨True && False, False⟩;

-- False AND True related to False
⊢ false_and_true : (False && True) [False] (False (False && True)) := ι⟨False && True, False⟩;

-- False AND False related to False
⊢ false_and_false : (False && False) [False] (False (False && False)) := ι⟨False && False, False⟩;

-- =============================================================================
-- PROVEN THEOREMS - DISJUNCTION PROPERTIES
-- =============================================================================

-- True OR True related to True
⊢ true_or_true : (True || True) [True] (True (True || True)) := ι⟨True || True, True⟩;

-- True OR False related to True
⊢ true_or_false : (True || False) [True] (True (True || False)) := ι⟨True || False, True⟩;

-- False OR True related to True
⊢ false_or_true : (False || True) [True] (True (False || True)) := ι⟨False || True, True⟩;

-- False OR False related to False
⊢ false_or_false : (False || False) [False] (False (False || False)) := ι⟨False || False, False⟩;

-- =============================================================================
-- PROVEN THEOREMS - IMPLICATION PROPERTIES
-- =============================================================================

-- True implies True related to True
⊢ true_implies_true : (Implies True True) [True] (True (Implies True True)) := ι⟨Implies True True, True⟩;

-- True implies False related to False
⊢ true_implies_false : (Implies True False) [False] (False (Implies True False)) := ι⟨Implies True False, False⟩;

-- False implies True related to True
⊢ false_implies_true : (Implies False True) [True] (True (Implies False True)) := ι⟨Implies False True, True⟩;

-- False implies False related to True
⊢ false_implies_false : (Implies False False) [True] (True (Implies False False)) := ι⟨Implies False False, True⟩;

-- =============================================================================
-- PROVEN THEOREMS - XOR PROPERTIES
-- =============================================================================

-- True XOR True related to False
⊢ true_xor_true : (Xor True True) [False] (False (Xor True True)) := ι⟨Xor True True, False⟩;

-- True XOR False related to True
⊢ true_xor_false : (Xor True False) [True] (True (Xor True False)) := ι⟨Xor True False, True⟩;

-- False XOR True related to True
⊢ false_xor_true : (Xor False True) [True] (True (Xor False True)) := ι⟨Xor False True, True⟩;

-- False XOR False related to False
⊢ false_xor_false : (Xor False False) [False] (False (Xor False False)) := ι⟨Xor False False, False⟩;

-- =============================================================================
-- PROVEN THEOREMS - CONDITIONAL PROPERTIES
-- =============================================================================

-- If True then True else False related to True
⊢ if_true_then_true_else_false : (IfThenElse True True False) [True] (True (IfThenElse True True False)) := ι⟨IfThenElse True True False, True⟩;

-- If False then True else False related to False
⊢ if_false_then_true_else_false : (IfThenElse False True False) [False] (False (IfThenElse False True False)) := ι⟨IfThenElse False True False, False⟩;

-- =============================================================================
-- PROVEN THEOREMS - DERIVED FUNCTION PROPERTIES
-- =============================================================================

-- NAND of True and True related to False
⊢ nand_true_true : (Nand True True) [False] (False (Nand True True)) := ι⟨Nand True True, False⟩;

-- NOR of False and False related to True
⊢ nor_false_false : (Nor False False) [True] (True (Nor False False)) := ι⟨Nor False False, True⟩;

-- =============================================================================
-- PROVEN THEOREMS - LOGICAL LAWS
-- =============================================================================

-- Law of excluded middle: A or Not A is always True
⊢ excluded_middle_true : (True || (Not True)) [True] (True (True || (Not True))) := ι⟨True || (Not True), True⟩;
⊢ excluded_middle_false : (False || (Not False)) [True] (True (False || (Not False))) := ι⟨False || (Not False), True⟩;

-- Law of non-contradiction: A and Not A is always False
⊢ non_contradiction_true : (True && (Not True)) [False] (False (True && (Not True))) := ι⟨True && (Not True), False⟩;
⊢ non_contradiction_false : (False && (Not False)) [False] (False (False && (Not False))) := ι⟨False && (Not False), False⟩;

-- =============================================================================
-- NEGATION FUNCTION TYPING
-- =============================================================================

-- For any boolean b, Not b is also a boolean
⊢ not_type : (λx. Not x) [Bool → Bool] (λx. Not x) := 
  λb:Bool. ΛX. λx:X. λy:X. (b{X} y x);

-- =============================================================================
-- CONJUNCTION (AND) FUNCTION TYPING  
-- =============================================================================

-- Binary and function has type Bool → Bool → Bool
⊢ and_type : (λx. λy. x && y) [Bool → Bool → Bool] (λx. λy. x && y) := 
  λb1:Bool. λb2:Bool. ΛX. λx:X. λy:X. (b1{X} (b2{X} x y) y);

-- =============================================================================
-- DISJUNCTION (OR) FUNCTION TYPING
-- =============================================================================

-- Binary or function has type Bool → Bool → Bool  
⊢ or_type : (λx. λy. x || y) [Bool → Bool → Bool] (λx. λy. x || y) := 
  λb1:Bool. λb2:Bool. ΛX. λx:X. λy:X. (b1{X} x (b2{X} x y));

